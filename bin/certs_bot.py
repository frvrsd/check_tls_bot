#!/usr/bin/python3
import ssl
import socket
from datetime import datetime
import asyncio
import logging
from telegram import Bot
from telegram.error import RetryAfter
from cryptography import x509
from cryptography.hazmat.backends import default_backend
import subprocess

subprocess.run(["/usr/bin/python3", "/projects/Python/cert_check/bin/sort.py"])

with open("/projects/Python/cert_check/logs/certs_bot.log", "w"):
    pass

logging.basicConfig(
    filename="/projects/Python/cert_check/logs/certs_bot.log",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    encoding="utf-8",
)

telegram_bot_token = "Y"
chat_id = "" #your chat id with bot (you can send command /chatid when button.py started)


async def get_certificate_expiry_date(hostname):
    try:
        context = ssl._create_unverified_context()  # –°–æ–∑–¥–∞–µ–º –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç SSL
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as sslsock:
                cert_bin = sslsock.getpeercert(True)
                cert = x509.load_der_x509_certificate(cert_bin, default_backend())
                # logging.info(f'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {hostname}: {cert}')
                not_after = cert.not_valid_after
                expiry_date = not_after.replace(tzinfo=None)
                logging.info(f'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {hostname} –∏—Å—Ç–µ–∫–∞–µ—Ç {expiry_date}')
                return expiry_date
    except ssl.SSLError as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–∞ {hostname}, {e}')
        return None
    except socket.gaierror as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ {hostname}: {e}')
        return None


async def send_notification(bot, message):
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        await bot.send_message(chat_id=chat_id, text=message)
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except RetryAfter as e:
        logging.warning(
            f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥."
        )
        await asyncio.sleep(e.retry_after)
        await send_notification(bot, message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def plural_days(days, one_day="–¥–µ–Ω—å", two_days="–¥–Ω—è", five_days="–¥–Ω–µ–π"):
    # –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ '–¥–µ–Ω—å' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –¥–Ω–µ–π
    if days % 10 == 1 and days % 100 != 11:
        return f"{days} {one_day}"
    elif days % 10 in (2, 3, 4) and days % 100 not in (12, 13, 14):
        return f"{days} {two_days}"
    else:
        return f"{days} {five_days}"


async def check_certificates_batch(bot, batch):
    today = datetime.now()
    for hostname, website_name in batch:
        expiry_date = await get_certificate_expiry_date(hostname)
        if expiry_date:
            days_until_expiry = (expiry_date - today).days
            if days_until_expiry <= -1:
                message = f"üö®üö®üö®CRITICAL \n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {website_name} ({hostname}) –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {plural_days(-days_until_expiry)}! üö®üö®üö®"
                await send_notification(bot, message)
            elif days_until_expiry <= 3:
                message = f"üö®CRITICAL \n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {website_name} ({hostname}) –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {plural_days(days_until_expiry)}! üö®"
                await send_notification(bot, message)
            elif days_until_expiry <= 10:
                message = f"üü°WARNING \n –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {website_name} ({hostname}) –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {plural_days(days_until_expiry)}! üü°"
                await send_notification(bot, message)



async def check_certificates(bot):
    try:
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤...")
        with open("/projects/Python/cert_check/config/sites.txt", "r", encoding="utf-8") as file:
            lines = file.readlines()

        batch_size = 2  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
        for i in range(0, len(lines), batch_size):
            batch = []
            for line in lines[i : i + batch_size]:
                line = line.strip()
                if line.startswith("#") or not line:
                    continue
                parts = line.split("#")
                if len(parts) >= 2:
                    hostname = parts[0].strip()
                    website_name = parts[1].strip()
                    batch.append((hostname, website_name))
            if batch:
                await check_certificates_batch(bot, batch)

        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


async def main():
    bot = Bot(token=telegram_bot_token)
    while True:
        await check_certificates(bot)
        await asyncio.sleep(86400)



if __name__ == "__main__":
    asyncio.run(main())
